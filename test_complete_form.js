import { chromium } from 'playwright';

async function testCompleteAdminForm() {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    console.log('üöÄ Iniciando teste completo do formul√°rio administrativo...');
    
    // 1. Navegar para o login administrativo
    console.log('üîê Acessando login administrativo...');
    await page.goto('http://localhost:3000/#adminLogin');
    await page.waitForLoadState('networkidle');
    
    // Fechar modal de geolocaliza√ß√£o se aparecer
    try {
      await page.waitForTimeout(2000);
      const geoModal = page.locator('[aria-labelledby="initial-geo-modal-title"]');
      if (await geoModal.count() > 0) {
        const closeButton = geoModal.locator('button').first();
        await closeButton.click();
        console.log('‚úÖ Modal de geolocaliza√ß√£o fechado');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è Nenhum modal de geolocaliza√ß√£o');
    }
    
    await page.screenshot({ path: 'test_screenshots/complete_01_login.png' });

    // 2. Fazer login
    console.log('üìù Fazendo login...');
    await page.fill('input[type="email"]', 'quallity@admin.com');
    await page.fill('input[type="password"]', '1234');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    await page.screenshot({ path: 'test_screenshots/complete_02_dashboard.png' });

    // 3. Acessar formul√°rio de novo an√∫ncio
    console.log('üìã Acessando formul√°rio de novo an√∫ncio...');
    const newAdButton = page.locator('text=Novo An√∫ncio');
    await newAdButton.click();
    await page.waitForTimeout(3000);
    await page.screenshot({ path: 'test_screenshots/complete_03_form_loaded.png' });

    // 4. Preencher informa√ß√µes principais
    console.log('üìù Preenchendo informa√ß√µes principais...');
    
    // Selecionar Venda
    await page.locator('button:has-text("Venda")').first().click();
    await page.waitForTimeout(1000);
    
    // Selecionar Apartamento
    await page.locator('button:has-text("Apartamento")').first().click();
    await page.waitForTimeout(1000);
    
    // Preencher t√≠tulo
    await page.locator('input[placeholder*="Apartamento 2 quartos"]').fill('Apartamento Moderno 3 Quartos - Centro');
    await page.waitForTimeout(500);
    
    // Preencher descri√ß√£o
    await page.locator('textarea[placeholder*="Descreva as principais caracter√≠sticas"]').fill('Apartamento com excelente localiza√ß√£o no centro da cidade, com acabamento moderno, 3 quartos sendo 1 su√≠te, sala ampla, cozinha equipada e 2 vagas de garagem.');
    await page.waitForTimeout(500);
    
    // Preencher pre√ßo
    await page.locator('input[placeholder="R$ 0,00"]').first().fill('450000');
    await page.waitForTimeout(500);
    
    // Preencher √°rea bruta
    await page.locator('input[placeholder="0"]').first().fill('120');
    await page.waitForTimeout(500);
    
    await page.screenshot({ path: 'test_screenshots/complete_04_main_info_filled.png' });

    // 5. Preencher endere√ßo
    console.log('üìç Preenchendo endere√ßo...');
    
    // Preencher CEP
    const cepInput = page.locator('input[placeholder*="CEP"]').or(page.locator('input[maxlength="9"]'));
    if (await cepInput.count() > 0) {
      await cepInput.fill('01310-100');
      await page.waitForTimeout(3000); // Aguardar busca autom√°tica do CEP
      console.log('‚úÖ CEP preenchido');
    }
    
    // Preencher n√∫mero
    try {
      const numberInput = page.locator('input[placeholder*="n√∫mero"]').or(page.locator('input[placeholder*="N√∫mero"]'));
      if (await numberInput.count() > 0) {
        await numberInput.fill('123');
        console.log('‚úÖ N√∫mero preenchido');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è Campo n√∫mero n√£o encontrado');
    }
    
    await page.screenshot({ path: 'test_screenshots/complete_05_address_filled.png' });

    // 6. Preencher caracter√≠sticas do im√≥vel
    console.log('üè† Preenchendo caracter√≠sticas...');
    
    // Definir quartos (usando bot√µes + e -)
    try {
      const quartosSection = page.locator('text=Quartos').locator('..').locator('..');
      const plusButton = quartosSection.locator('button:has-text("+")');
      if (await plusButton.count() > 0) {
        await plusButton.click();
        await plusButton.click();
        await plusButton.click(); // 3 quartos
        console.log('‚úÖ Quartos definidos (3)');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel definir quartos:', e.message);
    }
    
    // Definir banheiros
    try {
      const banheirosSection = page.locator('text=Banheiros').locator('..').locator('..');
      const plusButton = banheirosSection.locator('button:has-text("+")');
      if (await plusButton.count() > 0) {
        await plusButton.click();
        await plusButton.click(); // 2 banheiros
        console.log('‚úÖ Banheiros definidos (2)');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel definir banheiros:', e.message);
    }
    
    // Definir vagas de garagem
    try {
      const vagasSection = page.locator('text=Vagas').locator('..').locator('..');
      const plusButton = vagasSection.locator('button:has-text("+")');
      if (await plusButton.count() > 0) {
        await plusButton.click();
        await plusButton.click(); // 2 vagas
        console.log('‚úÖ Vagas definidas (2)');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel definir vagas:', e.message);
    }
    
    await page.screenshot({ path: 'test_screenshots/complete_06_characteristics_filled.png' });

    // 7. Selecionar caracter√≠sticas do im√≥vel
    console.log('‚ú® Selecionando caracter√≠sticas...');
    
    try {
      // Selecionar algumas caracter√≠sticas comuns
      const characteristics = [
        'Ar condicionado',
        'Varanda',
        'Garagem',
        'Su√≠te'
      ];
      
      for (const char of characteristics) {
        try {
          const charButton = page.locator(`button:has-text("${char}")`);
          if (await charButton.count() > 0) {
            await charButton.first().click();
            await page.waitForTimeout(500);
            console.log(`‚úÖ Caracter√≠stica selecionada: ${char}`);
          }
        } catch (e) {
          console.log(`‚ÑπÔ∏è Caracter√≠stica n√£o encontrada: ${char}`);
        }
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è Erro ao selecionar caracter√≠sticas:', e.message);
    }
    
    await page.screenshot({ path: 'test_screenshots/complete_07_features_selected.png' });

    // 8. Verificar se√ß√£o de upload
    console.log('üì∏ Verificando se√ß√£o de upload...');
    
    try {
      const uploadSection = page.locator('text=Fotos').or(page.locator('text=Upload'));
      if (await uploadSection.count() > 0) {
        console.log('‚úÖ Se√ß√£o de upload encontrada');
      }
      
      // Verificar se h√° √°rea de drag and drop
      const dropArea = page.locator('text=Arraste e solte').or(page.locator('input[type="file"]'));
      if (await dropArea.count() > 0) {
        console.log('‚úÖ √Årea de upload de arquivos encontrada');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è Erro ao verificar upload:', e.message);
    }
    
    await page.screenshot({ path: 'test_screenshots/complete_08_upload_section.png' });

    // 9. Tentar submeter o formul√°rio
    console.log('üì§ Tentando submeter o formul√°rio...');
    
    try {
      // Procurar bot√£o de submiss√£o
      const submitButtons = [
        'button:has-text("Publicar")',
        'button:has-text("Salvar")',
        'button:has-text("Enviar")',
        'button[type="submit"]'
      ];
      
      let submitted = false;
      for (const selector of submitButtons) {
        try {
          const button = page.locator(selector);
          if (await button.count() > 0) {
            await button.first().click();
            console.log(`‚úÖ Bot√£o de submiss√£o clicado: ${selector}`);
            submitted = true;
            break;
          }
        } catch (e) {
          console.log(`‚ÑπÔ∏è Bot√£o n√£o funcionou: ${selector}`);
        }
      }
      
      if (submitted) {
        await page.waitForTimeout(5000);
        await page.screenshot({ path: 'test_screenshots/complete_09_after_submit.png' });
        
        // Verificar se houve redirecionamento ou mensagem de sucesso
        const successIndicators = [
          'text=sucesso',
          'text=publicado',
          'text=salvo',
          'text=criado'
        ];
        
        for (const indicator of successIndicators) {
          if (await page.locator(indicator).count() > 0) {
            console.log('‚úÖ Indicador de sucesso encontrado!');
            break;
          }
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum bot√£o de submiss√£o encontrado');
      }
    } catch (e) {
      console.log('‚ùå Erro ao submeter formul√°rio:', e.message);
      await page.screenshot({ path: 'test_screenshots/complete_error_submit.png' });
    }

    // 10. Verificar estado final
    console.log('üîç Verificando estado final...');
    await page.screenshot({ path: 'test_screenshots/complete_10_final_state.png' });
    
    console.log('‚úÖ Teste completo do formul√°rio administrativo finalizado!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste completo:', error);
    await page.screenshot({ path: 'test_screenshots/complete_error.png' });
  } finally {
    await browser.close();
  }
}

testCompleteAdminForm();