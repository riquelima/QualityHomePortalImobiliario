[
  {
    "projectId": "b95ac3de-1446-4986-b13d-82f948d598a2",
    "testId": "d4c562a8-8a46-4b06-973a-2bcd996e65ac",
    "userId": "f4486418-9011-70e7-9da3-d6823b672c50",
    "title": "TC010-Complete Property Publication Journey with All Validations",
    "description": "Test the end-to-end property publication flow, including multi-step form completions, AI generated content, media uploads, validations, and successful submission.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Locate and click the link or button to access the property publication section as a publisher.\n        frame = context.pages[-1]\n        # Click on 'Acesso Restrito' link to access restricted area for publisher login or property publication section\n        elem = frame.locator('xpath=html/body/div/div/footer/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid email and password credentials and click the login button to access the property publication section.\n        frame = context.pages[-1]\n        # Input valid email for publisher login\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('publisher@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password for publisher login\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ValidPassword123')\n        \n\n        frame = context.pages[-1]\n        # Click the login button to submit credentials\n        elem = frame.locator('xpath=html/body/div/div/div/div/div/form/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Property Publication Completed Successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError('Test case failed: The end-to-end property publication flow did not complete successfully as expected. Validation errors, AI content generation issues, media upload failures, or submission problems were encountered.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to login failure. The provided publisher credentials are not accepted by the system, blocking access to the property publication section. Please verify credentials or fix authentication issues to enable further testing of the property publication flow.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/?plugins=typography:65:26200)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/f4486418-9011-70e7-9da3-d6823b672c50/1761654177769409//tmp/test_task/result.webm",
    "created": "2025-10-28T12:20:38.071Z",
    "modified": "2025-10-28T12:22:57.910Z"
  }
]
